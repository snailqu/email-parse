# coding=utf-8
import pdfplumber
import os
import numpy as np
import pandas as pd
import time

import re

import regule_express
from Ocr import ocr_api
from pdf_table import pdf_run

from aipaas.env import env_mode


class Pdf(object):
    def __init__(self, file_path):
        self.text = None  # 文本
        self.tables = None  # 表格
        self.file_path = file_path

        self.ocr_flag = 0  # ocr识别 则置为1 表示其格式为单个列表嵌所有表格 匹配到第一个有效字段则break

    def pdf_to_text(self, input_path: str, option=False, *args, **kwargs) -> dict:
        '''
        :param input_path: the path of folder or files
        :param option: set True then use folder path, set Flase use file path
        :return: result dict {'text':str,'table':list} or {filename:{'text':str,'table':list}}
        '''

        def file_parse(file_name):
            with pdfplumber.open(file_name) as pdf_objects:
                all_texts = []
                all_tables = []
                for page in pdf_objects.pages:

                    text = page.extract_text()
                    all_texts.append(text) if text else all_texts.append('')

                    # parse table
                    tables = page.extract_tables()
                    for table in tables:
                        all_tables.append(table) if table else all_tables.append('')

            return {'text':'#page#'.join(all_texts), 'table':all_tables}

        if option:
            all_dict = {}
            for filename in os.listdir(input_path):
                all_dict[filename] = file_parse(input_path + '/' + filename)
            return all_dict
        else:
            return file_parse(input_path)

    def parse_pdf(self):
        pdf_data = self.pdf_to_text(self.file_path)
        text = pdf_data["text"]
        ta_list = []

        # 调用正则模板
        DF_regule = regule_express.pdf_regule(self.file_path, text)
        if not DF_regule.empty:
            d = np.array(DF_regule).tolist()
            d.insert(0, DF_regule.columns.tolist())
            ta_list.append(d)

        # 调用pdf接口解析
        list_RePdf = pdf_run(self.file_path)
        if list_RePdf and not ta_list:
            ta_list = list_RePdf

        if not ta_list:
            try:
                ocr_df = ocr_api.ocr_pdf(self.file_path, env_mode, lg='English', out_Type='EXCEL')
                ocr_list = self.process_ocr_output(ocr_df)
                ta_list.append(ocr_list)
                if ta_list:
                    self.ocr_flag += 1
            except:
                ta_list = []

        # ocr识别不出来 ，在调用pdfplumber表格解析
        if not ta_list:
            ta_list = pdf_data["table"]
        self.tables = ta_list
        return ta_list

    def parse_pdf_table(self, table: list, rex_target):
        if len(table) > 1:
            t = 0
            for key, rex in rex_target.items():
                if key == 'payment_amount':
                    rex += '|amount'
                for i in table[0]:
                    search = re.search(rex.lower(), str(i).lower())
                    if search:
                        t += 1
            # 按行解析
            if t > 1:
                data_frame = pd.DataFrame(table[1:], columns=table[0])
                return {col:data_frame[col].values.tolist() for col in data_frame.columns}
            # 转置解析
            trans_table = np.array(table).T.tolist()
            # 按列解析
            if t <= 1:
                try:
                    data_frame = pd.DataFrame(trans_table[1:], columns=table[0])
                    return {col:data_frame[col].values.tolist() for col in data_frame.columns}
                except:
                    return None
            return None
        else:
            return None

    def process_ocr_output(self, ocr_df):
        '''pdf的ocr解析出的excel表格特殊配置'''
        # 将列表转成DataFrame
        target_list = np.array(ocr_df).tolist()
        target_list.insert(0, ocr_df.columns.tolist())
        if 'Sabadell' in ocr_df.columns:
            print('--------------进入到ocr特殊配置')
            true_values = ocr_df.iloc[2:, 6].values.tolist()
            true_values.extend([np.nan, np.nan])
            ocr_df.iloc[:, 6] = true_values
            ocr_df.dropna(axis=0, how='all', inplace=True)
            ocr_df.dropna(axis=0, how='any', subset=['Unnamed: 6', 'Sabadell'], inplace=True)
            col_index = ocr_df[ocr_df['Sabadell'].apply(lambda x:'deudor' in str(x).lower())].index
            ocr_df.drop(index=col_index[1:], inplace=True)
            ocr_df.reset_index(drop=True, inplace=True)
            re_col = ocr_df[ocr_df['Sabadell'].apply(lambda x:'deudor' in str(x).lower())].index

            ocr_df.columns = ['invoice no', 'invoice_amount', 'no use col_1', 'date', 'invoice_date', 'no use col_2',
                              'payment']
            ocr_df = ocr_df.iloc[re_col[0] + 1:]
            ocr_df.reset_index(drop=True, inplace=True)

            ocr_df.loc[:, 'invoice no'] = ocr_df.loc[:, 'invoice no'].apply(lambda x:re.split(' ', str(x))[-1])
            ocr_df.dropna(axis=1, how='all', inplace=True)
            ocr_df.dropna(axis=0, how='all', inplace=True)
            target_list = np.array(ocr_df).tolist()
            target_list.insert(0, ocr_df.columns.tolist())
        return target_list


if __name__ == '__main__':
    pdf_path = r'D:\PDF_reader\pdf_re\Worcestershire County Council\SU24317.pdf'
    pdf_path = r'D:\PDF_reader\pdf_re\Sure (Jersey) Limited\RemittanceAdvice203339071.pdf'

    pdf = Pdf(pdf_path)
    pdf_result = pdf.parse_pdf()
    print(pdf_result)
